package mekabuild_test

import (
	"bytes"
	"testing"

	"github.com/meka-dev/mekatek-go/mekabuild"
)

func TestBuildBlockRequestSignableBytes(t *testing.T) {
	have := mekabuild.BuildBlockRequestSignableBytes(
		"testchain-1",
		500,
		"validator-42",
		1234,
		5678,
		[][]byte{
			[]byte(`send the moneyz`),
		},
	)

	want := []byte{
		0x62, 0x75, 0x69, 0x6c, 0x64, 0x2d, 0x62, 0x6c,
		0x6f, 0x63, 0x6b, 0x2d, 0x72, 0x65, 0x71, 0x75,
		0x65, 0x73, 0x74, 0xb, 0x0, 0x0, 0x0, 0x0, 0x0,
		0x0, 0x0, 0x74, 0x65, 0x73, 0x74, 0x63, 0x68,
		0x61, 0x69, 0x6e, 0x2d, 0x31, 0xf4, 0x1, 0x0,
		0x0, 0x0, 0x0, 0x0, 0x0, 0xc, 0x0, 0x0, 0x0,
		0x0, 0x0, 0x0, 0x0, 0x76, 0x61, 0x6c, 0x69,
		0x64, 0x61, 0x74, 0x6f, 0x72, 0x2d, 0x34, 0x32,
		0xd2, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2e,
		0x16, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0,
		0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0x0, 0x0, 0x0, 0x0,
		0x0, 0x0, 0x0, 0x73, 0x65, 0x6e, 0x64, 0x20, 0x74,
		0x68, 0x65, 0x20, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x7a,
	}

	if !bytes.Equal(have, want) {
		t.Fatalf("\nhave: %#v\nwant: %#v", have, want)
	}
}

func TestRegisterChallengeSignableBytes(t *testing.T) {
	have := mekabuild.RegisterChallengeSignableBytes(
		[]byte(`such challenge, much difficulty`),
	)

	want := []byte{
		0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
		0x2d, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
		0x67, 0x65, 0x1f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
		0x0, 0x73, 0x75, 0x63, 0x68, 0x20, 0x63, 0x68,
		0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2c,
		0x20, 0x6d, 0x75, 0x63, 0x68, 0x20, 0x64, 0x69,
		0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79,
	}

	if !bytes.Equal(have, want) {
		t.Fatalf("\nhave: %#v\nwant: %#v", have, want)
	}
}
